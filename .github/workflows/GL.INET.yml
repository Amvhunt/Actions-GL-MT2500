name: Build GL.INET

on:
  workflow_dispatch:
    # inputs:
    #   device:
    #     description: "选择设备"
    #     required: true
    #     default: "target_mt7981_gl-mt2500"
    #     type: choice
    #     options:
    #       - target_mt7981_gl-mt2500
    #   record:
    #     description: "输入描述"
    #     required: false
    #     default: "测试版"
    #     type: string
    #   glversion1:
    #     description: "版本"
    #     required: false
    #     default: "5.4.211"
    #     type: string
    #   glversion2:
    #     description: "固件类型"
    #     required: false
    #     default: "OpenWrt-21.02"
    #     type: string
    #   ui:
    #     description: "是否包含官方UI (目前支持IPQ6018系列、mt7981系列和GL-A1300)"
    #     required: false
    #     default: true
    #     type: boolean
    #   istore:
    #     description: "是否包含istore(目前支持MT-2500/MT-3000)"
    #     required: false
    #     default: false
    #     type: boolean
    #   isdocker:
    #     description: "是否包含docker"
    #     required: false
    #     default: true
    #     type: boolean
    #   isrelease:
    #     description: "上传到release"
    #     required: false
    #     default: false
    #     type: boolean
    #   pushplus:
    #     description: "Pushplus通知"
    #     required: false
    #     default: true
    #     type: boolean
  push:
    branches:
      - main
    paths:
      - '.github/workflows/*.yml'
      - "*.yml"
      - "*.sh"

#inputs换env
env:
  device: "target_mt7981_gl-mt2500"
  record: "测试版"
  glversion1: "5.4.211"
  glversion2: "OpenWrt-21.02"
  ui: true
  istore: false
  isdocker: true
  isrelease: false
  pushplus: true



#          sudo apt upgrade -y会报错

jobs:
  build:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - name: update
        run: |
          sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
          sudo apt update -y
          sudo apt install libfuse-dev -y
          sudo apt install python build-essential libncurses5-dev gawk git libssl-dev gettext zlib1g-dev swig unzip time rsync python3 python3-setuptools python3-yaml subversion -y
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean
          sudo timedatectl set-timezone "Asia/Shanghai"
          git config --global user.email "AoThen@Github.com"
          git config --global user.name "AoThen"

      - name: inputs Info
        run: |
          echo "
          device: ${{ env.device }}
          record: ${{ env.record }}
          glversion1: ${{ env.glversion1 }}
          glversion2: ${{ env.glversion2 }}
          ui: ${{ env.ui }}
          istore: ${{ env.istore }}
          isrelease: ${{ env.isrelease }}
          pushplus: ${{ env.pushplus }}
          "

      - name: make
        run: |
          sudo chmod +x ./build.sh
          ./build.sh ~ ${{ env.device }} ${{ env.ui }} ${{ env.glversion1 }} ${{ env.glversion2 }} ${{ env.istore }} ${{ env.isdocker }}

      - name: Organize files
        id: organize
        if: true && !failure() && !cancelled()
        run: |
          cd ~/firmware
          echo "
          device: ${{ env.device }}
          record: ${{ env.record }}
          glversion1: ${{ env.glversion1 }}
          glversion2: ${{ env.glversion2 }}
          ui: ${{ env.ui }}
          istore: ${{ env.istore }}
          isrelease: ${{ env.isrelease }}
          pushplus: ${{ env.pushplus }} " > info.txt
          echo "FIRMWARE=$PWD" >> $GITHUB_ENV
          rm -rf "openwrt-imagebuilder-mediatek-mt7981.Linux-x86_64.tar.xz"
          cd ~/packages
          echo "
          device: ${{ env.device }}
          record: ${{ env.record }}
          glversion1: ${{ env.glversion1 }}
          glversion2: ${{ env.glversion2 }}
          ui: ${{ env.ui }}
          istore: ${{ env.istore }}
          isrelease: ${{ env.isrelease }}
          pushplus: ${{ env.pushplus }} " > info.txt
          echo "PACKAGES=$PWD" >> $GITHUB_ENV
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Check space usage
        if: (!cancelled())
        run: df -hT

      - name: Upload firmware directory
        uses: actions/upload-artifact@main
        if: steps.organize.outputs.status == 'success' && !cancelled() && !failure()
        with:
          name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          path: ${{ env.FIRMWARE }}

      - name: Upload packages directory
        uses: actions/upload-artifact@main
        if: steps.organize.outputs.status == 'success' && !cancelled() && !failure()
        with:
          name: OpenWrt_packages${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          path: ${{ env.PACKAGES }}

      - name: Generate release tag
        id: tag
        if: true && !failure() && !cancelled()
        run: |
          echo "release_tag=${{inputs.device}}.ui_${{ env.ui }}.istore_${{ env.istore }}.$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Upload firmware to release
        uses: softprops/action-gh-release@v1
        if: ${{ env.isrelease }} == 'true' && steps.tag.outputs.status == 'success' && !cancelled() && !failure()
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_FIRMWARE }}
        with:
          body: ${{ env.record }}
          tag_name: ${{ steps.tag.outputs.release_tag }}
          files: ${{ env.FIRMWARE }}/*

      - name: Pushplus Info
        if: ${{ env.pushplus }} == 'true' && steps.tag.outputs.status == 'success' && !cancelled() && !failure()
        run: |
          curl "http://www.pushplus.plus/send?token=${{ secrets.PUSHPLUS_TOKEN }}&title=Actions_Success&content=${{ env.device }}&template=txt"
