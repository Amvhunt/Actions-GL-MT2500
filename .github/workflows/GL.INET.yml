name: Build GL.INET

on:
  # 手动触发事件
  workflow_dispatch:
    inputs:
      device:
        description: "选择设备"
        required: true
        default: "target_mt7981_gl-mt2500"
        type: choice
        options:
          - target_wlan_ap-gl-ax1800
          - target_wlan_ap-gl-axt1800
          - target_wlan_ap-gl-ax1800-5-4
          - target_wlan_ap-gl-axt1800-5-4
          - target_ipq40xx_gl-a1300
          - target_mt7981_gl-mt2500
          - target_mt7981_gl-mt3000
          - target_siflower_gl-sf1200
          - target_siflower_gl-sft1200
          - target_ramips_gl-mt1300
      record:
        description: "输入描述"
        required: false
        default: "openclash"
        type: string
      glversion1:
        description: "版本"
        required: false
        default: "AoThen V1.0"
        type: string
      glversion2:
        description: "固件类型"
        required: false
        default: "Alpha1"
        type: string
      ui:
        description: "是否包含官方UI (目前支持IPQ6018系列、mt7981系列和GL-A1300)"
        required: false
        default: true
        type: boolean
      istore:
        description: "是否包含istore(目前支持MT-2500/MT-3000)"
        required: false
        default: false
        type: boolean
      release:
        description: "上传到release"
        required: false
        default: false
        type: boolean

jobs:
  build:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - name: Initialization and update environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
          sudo apt -y autoremove --purge
          sudo apt -y clean

          sudo apt update -y
          sudo apt upgrade -y
          sudo apt install python build-essential libncurses5-dev gawk git libssl-dev gettext zlib1g-dev swig unzip time rsync python3 python3-setuptools python3-yaml subversion -y
          git config --global user.email "AoThen@Github.com"
          git config --global user.name "AoThen"

      - name: make
        run: |
          chmod +x ./build.sh
          ./build.sh ~ ${{ inputs.device }} ${{ inputs.ui }} ${{ inputs.glversion1 }} ${{ inputs.glversion2 }} ${{ inputs.istore }}

      - name: Organize files
        id: organize
        if: true && !failure() && !cancelled()
        run: |
          cd ~/firmware
          echo "FIRMWARE=$PWD" >> $GITHUB_ENV
          cd ~/packages
          echo "PACKAGES=$PWD" >> $GITHUB_ENV
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Check space usage
        if: (!cancelled())
        run: df -hT
        
      - name: Upload firmware directory
        uses: actions/upload-artifact@main
        if: steps.organize.outputs.status == 'success' && !cancelled() && !failure()
        with:
          name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          path: ${{ env.FIRMWARE }}

      - name: Upload packages directory
        uses: actions/upload-artifact@main
        if: steps.organize.outputs.status == 'success' && !cancelled() && !failure()
        with:
          name: OpenWrt_packages${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          path: ${{ env.PACKAGES }}

      - name: Generate release tag
        id: tag
        if: true && !failure() && !cancelled()
        run: |
          echo "release_tag=${{inputs.device}}.${{ inputs.ui }}.$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Upload firmware to release
        uses: softprops/action-gh-release@v1
        if: ${{ inputs.ui }} == true && steps.tag.outputs.status == 'success' && !cancelled() && !failure()
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_FIRMWARE }}
        with:
          body: ${{ inputs.record }}
          tag_name: ${{ steps.tag.outputs.release_tag }}
          files: ${{ env.FIRMWARE }}/*
